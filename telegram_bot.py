import logging
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ChatAction
from config.settings import TELEGRAM_BOT_TOKEN, TYPING_DELAY, USER_MESSAGES, USE_JSON_MODE, DEFAULT_MODE
from services.deepseek_service import deepseek_service
from events.base_event import BaseEvent
from actors.memory_actor import MemoryActor
from actors.message_types import create_memory_message
from database.connection import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class ChimeraTelegramBot:
    """Telegram –±–æ—Ç –•–∏–º–µ—Ä—ã - –ø—Ä–æ—Ç–æ—Ç–∏–ø –±—É–¥—É—â–µ–≥–æ UserSessionActor"""
    
    def __init__(self):
        self.application = None
        self.is_running = False
        self.memory_actor = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ initialize()
    
    async def log_event(self, event_type: str, user_id: int, data: dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π - –ø—Ä–æ—Ç–æ—Ç–∏–ø Event Sourcing"""
        event = BaseEvent(
            event_type=event_type,
            user_id=user_id,
            data=data
        )
        logger.info(f"üí• Event: {event.json()}")
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Event Store
    
    async def send_typing_action(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏"""
        while self.is_typing:
            await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
            await asyncio.sleep(TYPING_DELAY)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø—Ä–æ—Ç–æ—Ç–∏–ø UserSessionActor –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = update.message.from_user.id
            username = update.message.from_user.username or "unknown"
            message_text = update.message.text
            chat_id = update.effective_chat.id
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.log_event(
                "user_message",
                user_id,
                {
                    "text": message_text,
                    "username": username,
                    "chat_id": chat_id,
                    "timestamp": datetime.utcnow().isoformat()
                }
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
            memory_message = create_memory_message(
                "store_user_message",
                {
                    "user_id": user_id,
                    "content": message_text,
                    "mode": DEFAULT_MODE
                },
                sender="telegram_bot"
            )
            
            await self.memory_actor.handle_message(memory_message)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            self.is_typing = True
            typing_task = asyncio.create_task(
                self.send_typing_action(context, chat_id)
            )
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek —Å JSON –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                response = await deepseek_service.ask_deepseek(
                    message_text,
                    user_id=user_id,
                    use_json=USE_JSON_MODE,  # –ë–µ—Ä–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    mode=DEFAULT_MODE  # –ë–µ—Ä–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                )
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
                self.is_typing = False
                await typing_task
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                await update.message.reply_text(response)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ø–∞–º—è—Ç—å
                bot_message = create_memory_message(
                    "store_bot_response",
                    {
                        "user_id": user_id,
                        "content": response,
                        "mode": DEFAULT_MODE
                    },
                    sender="telegram_bot"
                )
                
                await self.memory_actor.handle_message(bot_message)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
                await self.log_event(
                    "bot_response",
                    user_id,
                    {
                        "text": response,
                        "chat_id": chat_id,
                        "timestamp": datetime.utcnow().isoformat()
                    }
                )
                
            except Exception as e:
                self.is_typing = False
                logger.error(f"Error in message processing: {e}")
                await update.message.reply_text(USER_MESSAGES["error_processing"])
                
        except Exception as e:
            logger.error(f"Critical error in handle_message: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.message.from_user.id
        
        await self.log_event(
            "command_start",
            user_id,
            {"timestamp": datetime.utcnow().isoformat()}
        )
        
        await update.message.reply_text(USER_MESSAGES["welcome"])
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.initialize()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MemoryActor
        self.memory_actor = MemoryActor(db)
        await self.memory_actor.initialize()
        logger.info("üê≤ MemoryActor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )
        
        self.is_running = True
        logger.info("üê≤ –°—É—â–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–Ω—É–ª–æ—Å—å")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.initialize()
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        logger.info("üê≤ –°—É—â–µ—Å—Ç–≤–æ —Å–ª—É—à–∞–µ—Ç")
    
    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MemoryActor
        if self.memory_actor:
            await self.memory_actor.shutdown()
            logger.info("üê≤ MemoryActor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        await db.close()
        if self.application:
            await self.application.stop()
        self.is_running = False
        logger.info("üê≤ –°—É—â–µ—Å—Ç–≤–æ –∑–∞—Å–Ω—É–ª–æ")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = ChimeraTelegramBot()